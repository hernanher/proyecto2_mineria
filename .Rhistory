# cargar y limpiar datos ----
flight_dataasdasda <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour")) %>%
# especifico las columnas de interes
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
pacman::p_load(tidymodels, tidyverse, nycflights13)
set.seed(42)
# cargar y limpiar datos ----
flight_dataasdasda <-
flights %>%
mutate(
# discretiza arr_delay y lo hace factor
arr_delay = ifelse(arr_delay >= 30, "late", "on_time"),
arr_delay = factor(arr_delay),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(time_hour)
) %>%
# combino con data de clima
inner_join(weather, by = c("origin", "time_hour")) %>%
# especifico las columnas de interes
select(dep_time, flight, origin, dest, air_time, distance,
carrier, date, arr_delay, time_hour) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
View(flight_dataasdasda)
# cargar y limpiar datos ----
data <- read.csv("ALUMNOS-trainData.csv")
View(data)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
departure_time = lubridate::hours(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(1000)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
departure_time = lubridate::hour(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(1000)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::hour(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(1000)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
#date = lubridate::hour(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(1000)
View(Base)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as.period(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
view(flights)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_date(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
# obtengo solo la fecha a partir de fecha con hora
date = lubridate::as_datetime(departure_time)
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
View(flight_dataasdasda)
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
View(Base)
## inspeccion de los datos
Base %>%
count(noshow) %>%
mutate(prop = n/sum(n))
# receta simple
receta <-
recipe(noshow ~ ., data = Base)
View(receta)
# visualizar
summary(receta)
Base %>%
distinct(date) %>%
mutate(numeric_date = as.numeric(date))
# modificando fechas
Base <-
recipe(noshow ~ ., data = Base) %>%
update_role(flight_number, departure_time, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE)
# modificando fechas
Base <-
recipe(noshow ~ ., data = Base) %>%
update_role(fligth_number, departure_time, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE)
View(Base)
# cargar y limpiar datos ----
data <- read.csv("ALUMNOS-trainData.csv")
Base <-
data %>%
mutate(
# discretiza arr_delay y lo hace factor
noshow = ifelse(noshow >= 4, 1, 0),
noshow = factor(noshow),
) %>%
# excluyo datos faltates
na.omit() %>%
# transformo characteres en factores
mutate_if(is.character, as.factor)  %>%
# tomo una muestra de tamaÃ±o 10.000 para poder ejecutar los modelos
sample_n(10000)
## inspeccion de los datos
Base %>%
count(noshow) %>%
mutate(prop = n/sum(n))
glimpse(Base)
# especificar receta ----
noshow ~ .
# receta simple
receta <-
recipe(noshow ~ ., data = Base)
# visualizar
summary(receta)
Base
# modificando fechas
receta <-
recipe(noshow ~ ., data = Base) %>%
update_role(fligth_number, departure_time, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE)
# modificando fechas y dummys
receta <-
recipe(noshow ~ ., data = Base) %>%
update_role(fligth_number, departure_time, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE)
# modificando fechas y dummys
receta <-
recipe(noshow ~ ., data = Base) %>%
update_role(fligth_number, departure_time, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE)%>%
step_dummy(all_nominal_predictors())
View(receta)
# modificando fechas, predictores nominales a dummys y eliminar columnas sin varianza
receta <-
recipe(noshow ~ ., data = Base) %>%
update_role(fligth_number, departure_time, new_role = "ID") %>%
step_date(date, features = c("dow", "month")) %>%
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE)%>%
step_dummy(all_nominal_predictors())%>%
step_zv(all_predictors())
nearest_neighbor()
nearest_neighbor() %>%
set_mode("classification")
knn_mod <- nearest_neighbor() %>%
set_mode("classification")
View(knn_mod)
base_wflow <-
workflow() %>%
add_model(knn_mod) %>%
add_recipe(receta)
View(base_wflow)
# split data ----
data_split <- initial_split(base, prop = 3/4)
# split data ----
data_split <- initial_split(base, prop = 3/4)
# split data ----
data_split <- initial_split(Base_c, prop = 3/4)
train_data <- training(data_split)
## inspeccion de los datos
Base_c %>%
count(noshow) %>%
mutate(prop = n/sum(n))
## inspeccion de los datos
Base_c %>%
count(noshow) %>%
mutate(prop = n/sum(n))
# split data ----
data_split <- initial_split(Base, prop = 3/4)
train_data <- training(data_split)
test_data  <- testing(data_split)
train_data %>%
count(arr_delay) %>%
mutate(prop = n/sum(n))
train_data %>%
count(noshow) %>%
mutate(prop = n/sum(n))
data_split_strat <- initial_split(Base, prop = 3/4, strata = arr_delay)
data_split_strat <- initial_split(Base, prop = 3/4, strata = noshow)
train_data <- training(data_split_strat)
test_data  <- testing(data_split_strat)
train_data %>%
count(noshow) %>%
mutate(prop = n/sum(n))
